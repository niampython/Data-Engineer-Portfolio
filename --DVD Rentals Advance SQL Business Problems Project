									--DVD Rentals Advance SQL Business Problems Project  


/* 1. Name the top 5 actors that are in movies with the most rentals.  How much revenue did each actor generate in total.  
Out of that total, get the percentage of total each actor contributed to total revenue.  
For the Actor who has the highest percentage give He or She the title "Best Selling Actor‚Äù*/

-- join tables and get the number of orders for each actor and the amount generated from each actor in sales
WITH actor_count AS (
SELECT A.actor_id, CONCAT(A.first_name,' ' ,A.last_name ) full_name, A.last_name, COUNT(A.actor_id) as actor_cnt, SUM(amount) actor_revenue
FROM customer as C INNER JOIN rental as R ON C.customer_id = R.customer_id
INNER JOIN inventory as I on I.inventory_id = R.inventory_id
INNER JOIN film_actor as FA ON FA.film_id = I.film_id INNER JOIN 
actor as A ON A.actor_id = FA.actor_id INNER JOIN payment as P ON
R.rental_id = P.rental_id
GROUP BY A.actor_id, A.first_name, A.last_name),   

--Rank actors based on number of rentals by customers and get the total revenue of all actors
ranking AS(
SELECT full_name, actor_cnt, actor_revenue, RANK() OVER( ORDER BY actor_cnt DESC) as actor_rank 
FROM actor_count),

--get the top 5 actors and total_revenue
total_revenue AS (
SELECT full_name, actor_cnt, actor_revenue, SUM(actor_revenue) OVER() AS total_revenue
FROM ranking
WHERE actor_rank <=5)

--get the percent of total for total revenue and get the rank of each actor
SELECT  full_name, actor_cnt, actor_revenue, CONCAT(ROUND((actor_revenue*100/total_revenue)::decimal,2),'%') as percent_of_total,
CASE WHEN RANK() OVER(ORDER BY (actor_revenue*100/total_revenue) DESC) = 1 THEN 'Best Selling Actor'
WHEN RANK() OVER(ORDER BY (actor_revenue*100/total_revenue) DESC) = 2 THEN 'Second Best Selling Actor'
WHEN RANK() OVER(ORDER BY (actor_revenue*100/total_revenue) DESC) = 3 THEN 'Third Best Selling Actor'
WHEN RANK() OVER(ORDER BY (actor_revenue*100/total_revenue) DESC) = 4 THEN 'Fourth Best Selling Actor'
WHEN RANK() OVER(ORDER BY (actor_revenue*100/total_revenue) DESC) = 5 THEN 'Fifth Best Selling Actor'
END as selling_rank
FROM total_revenue


SELECT *
FROM rental
ORDER BY rental_date


/* 2.
Calculate the monthly percentage change of total_revenue over the last 5 months for each category.
Retrieve the month for each category that had the highest month-over-month percentage change.
*/

--filter data to last 5 months, get the total revenue for each category and previous month revenue
WITH cte AS(
SELECT CA.category_id as category_id, name as Category_name, 
TO_CHAR(payment_date, 'Month') as month, SUM(amount) as Total_revenue,
EXTRACT(month FROM payment_date) as month_num, 
LAG(SUM(amount)) OVER(PARTITION BY name order by EXTRACT(month FROM payment_date)) previous_amount
FROM inventory as I INNER JOIN rental as R
ON I.inventory_id = R.inventory_id INNER JOIN payment as P
ON P.rental_id = R.rental_id INNER JOIN film_category as FA
ON FA.film_id = I.film_id INNER JOIN category as CA on
FA.category_id = CA.category_id
WHERE payment_date BETWEEN 
(SELECT max(payment_date) FROM payment) - INTERVAL '5 MONTHS' AND 
(SELECT max(payment_date) FROM payment) 
GROUP BY CA.category_id, name, TO_CHAR(payment_date, 'Month'), EXTRACT(month FROM payment_date)),

--get the month over month percentage of each category and rank the month over month percentage for each month
ranking as (
SELECT category_name, month,month_num,SUM(Total_revenue) as Total_revenue, 
 COALESCE(SUM(previous_amount),0) previous_amount,
 COALESCE((SUM(total_revenue)-SUM(previous_amount))/SUM(previous_amount)*100,0) percentage_change_over_time,
 RANK() OVER(PARTITION BY category_name ORDER BY (SUM(total_revenue)-SUM(previous_amount))/SUM(previous_amount)*100 DESC) 
FROM cte
GROUP BY category_id,category_name,month, month_num
ORDER BY category_name, month_num)

--select the month with the highest month over month percentage change
SELECT category_name,month, 
CONCAT('$',Total_revenue) as Total_revenue, CONCAT('$',previous_amount) as Previous_amount, 
CONCAT(ROUND(percentage_change_over_time::decimal,2), '%') as percentage_change_over_time
FROM ranking
WHERE rank = 2
 
/* 3.
What is the average duration of all DVD's that were rented for each rating.
If the Average duration is above a hour and a half say "Customers prefer extended movies"
if below a hour and a half say "Customers prefer short films"
*/

--get the avg duration of films for each rating
WITH rating AS(
SELECT rating, AVG(length/60) as avg_duration_of_film
FROM film as F INNER JOIN inventory as I  
ON F.film_id = I.film_id INNER JOIN rental as R 
ON I.inventory_id = R.inventory_id INNER JOIN 
payment as P ON R.rental_id = P.rental_id
GROUP BY rating)

--determine if customers prefer short films or extended films for each rating
SELECT  rating, ROUND(avg_duration_of_film,3) as avg_duration_of_film,
CASE WHEN avg_duration_of_film < 1.5 THEN 'Customers prefer short films' ELSE 'Customers prefer extended movies' END
as customers_preference
FROM rating

/* 4.
Create a pivot table that show the months in columns and the stores in rows.  
The values within the columns should reflect the total payment amount of each month.
*/
--retrieve the columns from the table stores you created.  Add all the months together to get the total amount of each store.
SELECT
	stores.store_id, 
	CONCAT('$',SUM(January)) as January,
	CONCAT('$',SUM(February)) as February,
	CONCAT('$',SUM(March))    as March,
	CONCAT('$',SUM(April))    as April,
	CONCAT('$',SUM(May))      as May,
	CONCAT('$',SUM(January)+SUM(February)+SUM(March)+SUM(April)+SUM(May)) as Total
FROM
--get the total payment amount for each month, name each date number by the month date name, group by store_id
(SELECT 
ST.store_id,
CASE WHEN EXTRACT(MONTH FROM payment_date) = 1 THEN SUM(amount) END as January,
CASE WHEN EXTRACT(MONTH FROM payment_date) = 2 THEN SUM(amount) END as February,
CASE WHEN EXTRACT(MONTH FROM payment_date) = 3 THEN SUM(amount) END as March,
CASE WHEN EXTRACT(MONTH FROM payment_date) = 4 THEN SUM(amount) END as April,
CASE WHEN EXTRACT(MONTH FROM payment_date) = 5 THEN SUM(amount) END as May
FROM customer as C INNER JOIN address as A
ON C.address_id = A.address_id INNER JOIN city as CI
ON A.city_id = CI.city_id INNER JOIN country as CO
ON CI.country_id = CO.country_id INNER JOIN payment as P
ON C.customer_id = P.customer_id INNER JOIN rental AS R
ON P.rental_id = R.rental_id INNER Join staff as S ON 
R.staff_id = S.staff_id INNER JOIN store as ST ON S.store_id = ST.store_id
GROUP BY ST.store_id, payment_date) as stores
GROUP BY stores.store_id
ORDER BY stores.store_id

/* 5.
Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 3 units).
Challenge: Include last restock date.  
*/

--count # of films by title in each store.  Find the last_update date of the inventory, filter table by stock less than 3
SELECT title,store_id, COUNT(I.film_id) as inventory_stock, MAX(I.last_update) as last_update
FROM inventory as I INNER JOIN film as F ON
I.film_id = F.film_id
GROUP BY store_id, title
HAVING COUNT(I.film_id) < 3
ORDER BY 2,3

/* 6.
 get the total amount of customers for each  country whose country name start with either an 'A' or 'S'
 what country has the most customers?
*/
--get the count of customers with names that start with 'a' or 's', then rank countries by number of customers
WITH customers_by_country AS (
SELECT country, count(C.customer_id) count_of_customers, RANK() OVER(ORDER BY count(C.customer_id) DESC ) ranking
from customer as C INNER JOIN address as A 
ON C.address_id = A.address_id INNER JOIN city as CI
ON A.city_id = CI.city_id INNER Join country as CO
ON CI.country_id = CO.country_id
WHERE country LIKE 'A%' OR country LIKE 'S%'
GROUP BY country
ORDER BY country)


